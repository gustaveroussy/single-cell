method = cor.method)$estimate
}, error=function(cond) {
return(NA)
})
length(which(cell.idx)) < 2
k
rownames(sobj@assays$ADT@counts)
table(cell.idx)
k=8
cell.idx <- cell.idx.list[[k]]
length(which(cell.idx)) < 2
k=9
k=8
tryCatch({
cor.test(slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.features[k],cell.idx],
slot(sobj@assays[[assay2]], slot)[rownames(slot(sobj@assays[[assay2]], slot)) == assay2.features[k],cell.idx],
method = cor.method)$estimate
}, error=function(cond) {
return(NA)
})
k=9
cell.idx <- cell.idx.list[[k]]
length(which(cell.idx)) < 2
tryCatch({
cor.test(slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.features[k],cell.idx],
slot(sobj@assays[[assay2]], slot)[rownames(slot(sobj@assays[[assay2]], slot)) == assay2.features[k],cell.idx],
method = cor.method)$estimate
}, error=function(cond) {
return(NA)
})
k=10
cell.idx <- cell.idx.list[[k]]
length(which(cell.idx)) < 2
length(which(cell.idx))
cell.idx
k
cell.idx <- cell.idx.list[[k]]
cell.idx.list[[10]]
cell.idx.list[[11]]
cell.idx.list[[10]]
assay1.features[k]
assay2.features[k]
slot
cell.idx1 <- slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.feature,] > 0
assay1.feature="CR2"
assay2.feature = "CD21"
cell.idx1 <- slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.feature,] > 0
cell.idx1
cell.idx2
cell.idx2 <- slot(sobj@assays[[assay2]], slot)[rownames(slot(sobj@assays[[assay2]], slot)) == assay2.feature,] > 0
cell.idx2
cell.idx1 <- slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.feature,] > 0
cell.idx1
dim(cell.idx1)
length(cell.idx1)
cell.idx2 <- slot(sobj@assays[[assay2]], slot)[rownames(slot(sobj@assays[[assay2]], slot)) == assay2.feature,] > 0
head(cell.idx2)
dim(cell.idx2)
length(cell.idx2)
length(cell.idx1)
length(ncol(sobj@assays[[assay1]]))
dim(ncol(sobj@assays[[assay1]]))
(ncol(sobj@assays[[assay1]]))
## Get cells with non-null expression in assay1 and assay2, with corresponding features between assays
zerocells.get <- function(sobj = NULL, assay1 = 'RNA', assay2 = 'ADT', assay1.feature = NULL, assay2.feature = NULL, slot = 'data') {
cell.idx1 <- slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.feature,] > 0
cell.idx2 <- slot(sobj@assays[[assay2]], slot)[rownames(slot(sobj@assays[[assay2]], slot)) == assay2.feature,] > 0
if(length(cell.idx1)==0) cell.idx1 = rep(FALSE, ncol(sobj@assays[[assay1]]))
if(length(cell.idx2)==0) cell.idx2 = rep(FALSE, ncol(sobj@assays[[assay2]]))
return(cell.idx1 & cell.idx2)
}
cell.idx1 <- slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.feature,] > 0
cell.idx1
cell.idx2 <- slot(sobj@assays[[assay2]], slot)[rownames(slot(sobj@assays[[assay2]], slot)) == assay2.feature,] > 0
cell.idx2
if(length(cell.idx1)==0) cell.idx1 = rep(FALSE, ncol(sobj@assays[[assay1]]))
cell.idx1
if(length(cell.idx2)==0) cell.idx2 = rep(FALSE, ncol(sobj@assays[[assay2]]))
cell.idx2
cell.idx1 & cell.idx2
head(cell.idx1 & cell.idx2)
table(cell.idx1 & cell.idx2)
table(cell.idx2)
table(cell.idx1)
#selecting cells with no zero expression
cell.idx.list <- sapply(
seq_along(gene.names),
function(k) {
if (zero.filter) zerocells.get(sobj = sobj, assay1 = assay1, assay2 = assay2, assay1.feature = assay1.features[k], assay2.feature = assay2.features[k], slot = slot) else rep(TRUE, ncol(sobj@assays[[assay1]]))
},
simplify = FALSE
)
tabl(cell.idx.list[[1]])
table(cell.idx.list[[1]])
table(cell.idx.list[[2]])
table(cell.idx.list[[3]])
table(cell.idx.list[[4]])
table(cell.idx.list[[5]])
table(cell.idx.list[[6]])
table(cell.idx.list[[7]])
table(cell.idx.list[[8]])
table(cell.idx.list[[9]])
table(cell.idx.list[[10]])
table(cell.idx.list[[11]])
table(cell.idx.list[[12]])
table(cell.idx.list[[13]])
#correlation
corvec <- vapply(
seq_along(gene.names),
function(k) {
cell.idx <- cell.idx.list[[k]]
if(length(which(cell.idx)) < 2) return(NA)
return(
tryCatch({
cor.test(slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.features[k],cell.idx],
slot(sobj@assays[[assay2]], slot)[rownames(slot(sobj@assays[[assay2]], slot)) == assay2.features[k],cell.idx],
method = cor.method)$estimate
}, error=function(cond) {
return(NA)
})
)
},
.1)
corvec
k=7
cell.idx <- cell.idx.list[[k]]
table(cell.idx)
length(which(cell.idx)) < 2
## Computing correlations between two assays with corresponding features (ex: RNA and ADT)
### assay features must be in the same order !
feature.cor <- function(sobj = NULL, assay1 = 'RNA', assay2 = 'ADT', assay1.features = NULL, assay2.features = NULL, slot = 'data', cor.method = 'spearman', zero.filter = TRUE, gene.names = NULL) {
#selecting cells with no zero expression
cell.idx.list <- sapply(
seq_along(gene.names),
function(k) {
if (zero.filter) zerocells.get(sobj = sobj, assay1 = assay1, assay2 = assay2, assay1.feature = assay1.features[k], assay2.feature = assay2.features[k], slot = slot) else rep(TRUE, ncol(sobj@assays[[assay1]]))
},
simplify = FALSE
)
print("ok1")
#correlation
corvec <- vapply(
seq_along(gene.names),
function(k) {
cell.idx <- cell.idx.list[[k]]
if(length(which(cell.idx)) < 2) return(NA) # must to get at least 2 cells with RNA and protein expressions to compute correlation
return(
tryCatch({
cor.test(slot(sobj@assays[[assay1]], slot)[rownames(slot(sobj@assays[[assay1]], slot)) == assay1.features[k],cell.idx],
slot(sobj@assays[[assay2]], slot)[rownames(slot(sobj@assays[[assay2]], slot)) == assay2.features[k],cell.idx],
method = cor.method)$estimate
}, error=function(cond) {
return(NA)
})
)
},
.1)
print("ok2")
out.df <- if (zero.filter) {
data.frame(vapply(cell.idx.list, function(x) { length(which(x)) }, 1L),  corvec, stringsAsFactors = FALSE)
} else {
data.frame(corvec, stringsAsFactors = FALSE)
}
colnames(out.df) <- if (zero.filter) {
c(paste(c(slot, 'non0'), collapse = '_'), paste(c('cor', slot, cor.method, '0filt'), collapse = '_'))
} else {
c(paste(c('cor', slot, cor.method), collapse = '_'))
}
print("ok3")
return(out.df)
# if (zero.filter) {
#   out.df <- data.frame(vapply(cell.idx.list, function(x) { length(which(x)) }, 1L),  corvec, stringsAsFactors = FALSE)
#   colnames(out.df) <- c(paste(c('cor', slot, 'non0'), collapse = '_'), paste(c('cor', slot, cor.method, '0filt'), collapse = '_'))
# } else {
#   out.df <-data.frame(corvec, stringsAsFactors = FALSE)
#   colnames(out.df) <- c(paste(c('cor', slot, cor.method, '0filt'), collapse = '_'))
# }
}
suppressWarnings(cor.unfiltered <- feature.cor(sobj = sobj, assay1 = assay, assay2 = 'ADT', assay1.features = gene.names, assay2.features = rownames(sobj@assays[['ADT']]@counts), slot = slot, cor.method = cor.method, zero.filter = FALSE, gene.names = gene.names))
suppressWarnings(cor.filtered <- feature.cor(sobj = sobj, assay1 = assay, assay2 = 'ADT', assay1.features = gene.names, assay2.features = rownames(sobj@assays[['ADT']]@counts), slot = slot, cor.method = cor.method, zero.filter = TRUE, gene.names = gene.names))
cor.df <- cbind(cor.df, cor.unfiltered, cor.filtered)
cor.df
### Computing correlations
cor.df <- data.frame(RNA_feature = gene.names, ADT_feature = rownames(sobj@assays[['ADT']]@counts), stringsAsFactors = FALSE)
suppressWarnings(cor.unfiltered <- feature.cor(sobj = sobj, assay1 = assay, assay2 = 'ADT', assay1.features = gene.names, assay2.features = rownames(sobj@assays[['ADT']]@counts), slot = slot, cor.method = cor.method, zero.filter = FALSE, gene.names = gene.names))
suppressWarnings(cor.filtered <- feature.cor(sobj = sobj, assay1 = assay, assay2 = 'ADT', assay1.features = gene.names, assay2.features = rownames(sobj@assays[['ADT']]@counts), slot = slot, cor.method = cor.method, zero.filter = TRUE, gene.names = gene.names))
cor.df <- cbind(cor.df, cor.unfiltered, cor.filtered)
sobj@assays[['ADT']]@misc$cor <- cor.df
rm(cor.df,cor.unfiltered,cor.filtered)
### Co-plot gene expression AND ADT protein level
print("Co-plot")
#### withtout customized cutoff
RNA_data_plot <- feature_plots(sobj, assay = assay, features = gene.names, slot = slot, reduction = RNA.reduction, min.cutoff = rep(0,length(gene.names)), max.cutoff = rep("q95",length(gene.names)))
assay
features
gene.names
features = gene.names
reduction = RNA.reduction
RNA.reduction
min.cutoff = rep(0,length(gene.names))
max.cutoff = rep("q95",length(gene.names))
if(!(assay %in% names(sobj@assays))) stop(paste0('Assay "', assay, '" does not exist !'))
Seurat::DefaultAssay(sobj) <- assay
plots=patchwork::wrap_plots(lapply(seq_len(length(features)), function(k){
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
}),
ncol=1) + plot_annotation(title = assay, theme = ggplot2::theme(plot.title = ggplot2::element_text(size=50, hjust=0.5, face="bold")))
seq_len(length(features))
(seq_len((features))
)
k=1
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
k=7
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=8
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=1
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=2
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=3
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=4
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=5
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=6
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=7
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=7
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=8
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=9
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=10
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
features[k]
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
if(grepl("Could not find", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=11
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
if(grepl("Could not find", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
k=12
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
if(grepl("Could not find", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
## Make FeaturePlot for a list of genes with exception capture
feature_plots <- function(sobj, assay, features, slot, reduction, min.cutoff, max.cutoff){
if(!(assay %in% names(sobj@assays))) stop(paste0('Assay "', assay, '" does not exist !'))
Seurat::DefaultAssay(sobj) <- assay
plots=patchwork::wrap_plots(lapply(seq_len(length(features)), function(k){
tryCatch({
Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
},
warning=function(cond) {
if(grepl("All cells have the same value", as.character(cond)) ) tmp_plot = Seurat::FeaturePlot(sobj, features = features[k], slot = slot, reduction = reduction, ncol = 1, pt.size = 2, order = TRUE, min.cutoff = min.cutoff[k], max.cutoff = max.cutoff[k])
if(grepl("The following requested variables were not found", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
if(grepl("Could not find", as.character(cond)) ) tmp_plot = patchwork::wrap_elements(patchwork::plot_spacer() + patchwork::plot_annotation(title = features[k], theme = ggplot2::theme(plot.title = ggplot2::element_text(size=18, hjust=0.5, face="bold"))))
return(tmp_plot)
})
}),
ncol=1) + plot_annotation(title = assay, theme = ggplot2::theme(plot.title = ggplot2::element_text(size=50, hjust=0.5, face="bold")))
return(plots)
}
#### withtout customized cutoff
RNA_data_plot <- feature_plots(sobj, assay = assay, features = gene.names, slot = slot, reduction = RNA.reduction, min.cutoff = rep(0,length(gene.names)), max.cutoff = rep("q95",length(gene.names)))
ADT_data_plot <- feature_plots(sobj, assay = 'ADT', features = rownames(sobj@assays[['ADT']]@counts), slot = slot, reduction = RNA.reduction, min.cutoff = rep(0,length(rownames(sobj@assays[['ADT']]@counts))), max.cutoff = rep("q95",length(rownames(sobj@assays[['ADT']]@counts))))
png(paste0(output_path_ADT,'/ADT_dimplot.png'), width = 1200, height = 600 * length(gene.names))
wrap_elements(RNA_data_plot) + wrap_elements(ADT_data_plot)
dev.off()
#### with customized cutoff
ADT_min.cutoff <- c("q30","q40","q40","q80","q80","q80",0,"q80","q80","q80","q80","q80")
ADT_max.cutoff <- c("q95","q95","q95","q95","q95","q95","q95","q95","q95","q95","q95","q95")
RNA_data_plot <- feature_plots(sobj, assay = assay, features = gene.names, slot = slot, reduction = RNA.reduction, min.cutoff = rep(0,length(gene.names)), max.cutoff = rep("q95",length(gene.names)))
ADT_data_plot <- feature_plots(sobj, assay = 'ADT', features = rownames(sobj@assays[['ADT']]@counts), slot = slot, reduction = RNA.reduction, min.cutoff = ADT_min.cutoff, max.cutoff = ADT_max.cutoff)
png(paste0(output_path_ADT,'/ADT_dimplot_legend_cutoff.png'), width = 1200, height = 600 * length(gene.names))
wrap_elements(RNA_data_plot) + wrap_elements(ADT_data_plot)
dev.off()
rm(RNA_data_plot,ADT_data_plot)
### Adding ADT expression (from @data slot) as metadata
print("Adding metadata")
adt.values <- t(as.matrix(sobj@assays$ADT@data))
colnames(adt.values) <- paste0("adt_", colnames(adt.values))
sobj <-  Seurat::AddMetaData(sobj, adt.values, col.name = colnames(adt.values))
rm(adt.values)
sobj@misc$params
sobj@misc$params
load("/home/m_aglave/Bureau/scRNAseq_10X/TEST_data/0732M_GE/F200_C1000_M0-0.05_R0-1_G5/DOUBLETSFILTER_all/SCTransformpercent_mt_percent_rb/pca/pca_20_0.8/0732M_GE_SCTransformpercent_mt_percent_rb_pca_20_0.8_ADT_TCR_BCR.rda")
sobj@misc$params$QC$mito.symbols
(FALSE && FALSE)
(FALSE && TRUE)
(TRUE && TRUE)
(TRUE && FALSE)
is.null(sobj@misc$params$QC$mito.symbols)
(remove.mt.genes && is.null(sobj@misc$params$QC$mito.symbols))
remove.mt.genes=TRUE
(remove.mt.genes && is.null(sobj@misc$params$QC$mito.symbols))
sobj@misc$params$QC$mito.symbols
sobj@misc$params$QC$ribo.symbols
sobj@misc$params$QC$stress.symbols
is.null(sobj@misc$params$QC$stress.symbols)
remove.str.genes
cerebroApp::launchCerebro()
cerebroApp::launchCerebro()
snakemake="no"
#### Get path if snakemake or not ####
path <- if(snakemake == "yes") snakemake@params[["snakefile_folder"]] else if(snakemake == "no")"/WORKDIR/scRNAseq_10X_R4" else stop("--snakemake parameter in Rscript not recognised! (setting: yes or no)")
path
snakemake="a"
#### Get path if snakemake or not ####
path <- if(snakemake == "yes") snakemake@params[["snakefile_folder"]] else if(snakemake == "no")"/WORKDIR/scRNAseq_10X_R4" else stop("--snakemake parameter in Rscript not recognised! (setting: yes or no)")
path
snakemake
args$options
args$options$pcmito.min=0.2
args="options"
args$options="pcmito.min"
args=list()
args=list(options=list(a="0.2",b="1", c=NULL,d="iou", e="fnle", f=NULL, g="3"))
arg[["options"]]
args$options
for (i in args$options){
print(i)
}
#### Formatting parameters ####
#convert "NULL" (in characters) into NULL
for (i in args){
print(i)
}
#### Formatting parameters ####
#convert "NULL" (in characters) into NULL
for (i in colnames(args)){
print(i)
}
#### Formatting parameters ####
#convert "NULL" (in characters) into NULL
for (i in names(args)){
print(i)
}
#### Formatting parameters ####
#convert "NULL" (in characters) into NULL
for (i in names(args$options)){
print(i)
}
#### Formatting parameters ####
#convert "NULL" (in characters) into NULL
for (i in names(args$options)){
if (args$options[i]=="NULL"){
print(i)
args$options[i] <-NULL
}
}
print(arg)
print(args)
a=3
as.numeric(a)
rjson
library(rjson)
data.path
data.path="/home/m_aglave/Bureau/0732M_GE/KALLISTOBUS/"
json_data <- rjson::fromJSON(file=paste0(data.path, "/run_info.json"))
json_data
droplets.nb
data.path
library("readr")
my_txt <- read_tsv(paste0(data.path, "/Materials_and_Methods.txt"))
my_txt
my_txt <- read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE)
my_txt
c(my_txt)
c(my_txt)$X1
c(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1
rbind(c(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1)
paste(c(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1, collapse="\n")
paste(c(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1, sep="\n")
paste(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE), sep="\n")
paste(as.vector(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1, sep="\n")
## Save Materials&Methods
a=c(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1
a
a[1]
paste(a, sep="\n")
## Save Materials&Methods
a=as.vector(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1
paste(a, sep="\n")
paste(a, colapse="\n")
paste(a, collapse="\n")
c(read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1
openxlsx::read.xlsx(paste0(data.path, "/Materials_and_Methods.txt"), sheet = 1, startRow = 1, fillMergedCells = TRUE, colNames = FALSE)
c(readr::read_tsv(paste0(data.path, "/Materials_and_Methods.txt"),col_names = FALSE))$X1
